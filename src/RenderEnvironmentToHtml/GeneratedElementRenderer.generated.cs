/*
 * This code has been automatically generated by aas_core3_0_sk_codegen.
 * Do NOT edit or append.
 */

using Aas = AasCore.Aas3_0; // renamed

using System.Collections.Generic;  // can't alias

namespace RenderEnvironmentToHtml
{
    /**
     * Render a model instance as a HTML snippet.
     *
     * All the transform methods are automatically generated. You probably want
     * to inherit from this class and override one or the other transformation.
     */
    internal class GeneratedElementRenderer
        : Aas.Visitation.AbstractTransformer<string>
    {
        public override string TransformExtension(
            Aas.IExtension that
        )
        {
            var parts = new List<string>();

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Name
            parts.Add(
                "<div class='property'>" +
                "<!-- Name -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Name\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Name)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render ValueType
            parts.Add(
                "<div class='property'>" +
                "<!-- Value type -->"
            );
            if (that.ValueType != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value type\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='enumeration'>\n" +
                    System.Web.HttpUtility.HtmlEncode(
                        Aas.Stringification.ToString(
                            that.ValueType
                        ) ?? "Invalid value"
                    ) + "\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Value)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render RefersTo
            parts.Add(
                "<div class='property'>" +
                "<!-- Refers to -->"
            );
            if (that.RefersTo != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Refers to\n" +
                    "</div>"
                );

                var partRefersTo = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.RefersTo
                )
                {
                    partRefersTo.Add(this.Transform(item));
                }

                partRefersTo.Add("</div>");
                parts.Add(string.Join("\n", partRefersTo));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-extension'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformAdministrativeInformation(
            Aas.IAdministrativeInformation that
        )
        {
            var parts = new List<string>();

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render Version
            parts.Add(
                "<div class='property'>" +
                "<!-- Version -->"
            );
            if (that.Version != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Version\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Version)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render Revision
            parts.Add(
                "<div class='property'>" +
                "<!-- Revision -->"
            );
            if (that.Revision != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Revision\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Revision)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render Creator
            parts.Add(
                "<div class='property'>" +
                "<!-- Creator -->"
            );
            if (that.Creator != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Creator\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.Creator
                    )
                );
            }
            parts.Add("</div>");

            // Render TemplateId
            parts.Add(
                "<div class='property'>" +
                "<!-- Template ID -->"
            );
            if (that.TemplateId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Template ID\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.TemplateId)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-administrative-information'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformQualifier(
            Aas.IQualifier that
        )
        {
            var parts = new List<string>();

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Kind
            parts.Add(
                "<div class='property'>" +
                "<!-- Kind -->"
            );
            if (that.Kind != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Kind\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='enumeration'>\n" +
                    System.Web.HttpUtility.HtmlEncode(
                        Aas.Stringification.ToString(
                            that.Kind
                        ) ?? "Invalid value"
                    ) + "\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render Type
            parts.Add(
                "<div class='property'>" +
                "<!-- Type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Type)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render ValueType
            parts.Add(
                "<div class='property'>" +
                "<!-- Value type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.ValueType
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Value)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render ValueId
            parts.Add(
                "<div class='property'>" +
                "<!-- Value ID -->"
            );
            if (that.ValueId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.ValueId
                    )
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-qualifier'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformAssetAdministrationShell(
            Aas.IAssetAdministrationShell that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render Administration
            parts.Add(
                "<div class='property'>" +
                "<!-- Administration -->"
            );
            if (that.Administration != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Administration\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.Administration
                    )
                );
            }
            parts.Add("</div>");

            // Render Id
            parts.Add(
                "<div class='property'>" +
                "<!-- ID -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "ID\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Id)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render DerivedFrom
            parts.Add(
                "<div class='property'>" +
                "<!-- Derived from -->"
            );
            if (that.DerivedFrom != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Derived from\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.DerivedFrom
                    )
                );
            }
            parts.Add("</div>");

            // Render AssetInformation
            parts.Add(
                "<div class='property'>" +
                "<!-- Asset information -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Asset information\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.AssetInformation
                )
            );
            parts.Add("</div>");

            // Render Submodels
            parts.Add(
                "<div class='property'>" +
                "<!-- Submodels -->"
            );
            if (that.Submodels != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Submodels\n" +
                    "</div>"
                );

                var partSubmodels = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Submodels
                )
                {
                    partSubmodels.Add(this.Transform(item));
                }

                partSubmodels.Add("</div>");
                parts.Add(string.Join("\n", partSubmodels));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-asset-administration-shell'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformAssetInformation(
            Aas.IAssetInformation that
        )
        {
            var parts = new List<string>();

            // Render AssetKind
            parts.Add(
                "<div class='property'>" +
                "<!-- Asset kind -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Asset kind\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.AssetKind
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render GlobalAssetId
            parts.Add(
                "<div class='property'>" +
                "<!-- Global asset ID -->"
            );
            if (that.GlobalAssetId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Global asset ID\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.GlobalAssetId)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render SpecificAssetIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Specific asset IDs -->"
            );
            if (that.SpecificAssetIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Specific asset IDs\n" +
                    "</div>"
                );

                var partSpecificAssetIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SpecificAssetIds
                )
                {
                    partSpecificAssetIds.Add(this.Transform(item));
                }

                partSpecificAssetIds.Add("</div>");
                parts.Add(string.Join("\n", partSpecificAssetIds));
            }
            parts.Add("</div>");

            // Render AssetType
            parts.Add(
                "<div class='property'>" +
                "<!-- Asset type -->"
            );
            if (that.AssetType != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Asset type\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.AssetType)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DefaultThumbnail
            parts.Add(
                "<div class='property'>" +
                "<!-- Default thumbnail -->"
            );
            if (that.DefaultThumbnail != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Default thumbnail\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.DefaultThumbnail
                    )
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-asset-information'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformResource(
            Aas.IResource that
        )
        {
            var parts = new List<string>();

            // Render Path
            parts.Add(
                "<div class='property'>" +
                "<!-- Path -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Path\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Path)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render ContentType
            parts.Add(
                "<div class='property'>" +
                "<!-- Content type -->"
            );
            if (that.ContentType != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Content type\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.ContentType)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-resource'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformSpecificAssetId(
            Aas.ISpecificAssetId that
        )
        {
            var parts = new List<string>();

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Name
            parts.Add(
                "<div class='property'>" +
                "<!-- Name -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Name\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Name)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Value)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render ExternalSubjectId
            parts.Add(
                "<div class='property'>" +
                "<!-- External subject ID -->"
            );
            if (that.ExternalSubjectId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "External subject ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.ExternalSubjectId
                    )
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-specific-asset-id'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformSubmodel(
            Aas.ISubmodel that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render Administration
            parts.Add(
                "<div class='property'>" +
                "<!-- Administration -->"
            );
            if (that.Administration != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Administration\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.Administration
                    )
                );
            }
            parts.Add("</div>");

            // Render Id
            parts.Add(
                "<div class='property'>" +
                "<!-- ID -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "ID\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Id)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Kind
            parts.Add(
                "<div class='property'>" +
                "<!-- Kind -->"
            );
            if (that.Kind != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Kind\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='enumeration'>\n" +
                    System.Web.HttpUtility.HtmlEncode(
                        Aas.Stringification.ToString(
                            that.Kind
                        ) ?? "Invalid value"
                    ) + "\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render SubmodelElements
            parts.Add(
                "<div class='property'>" +
                "<!-- Submodel elements -->"
            );
            if (that.SubmodelElements != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Submodel elements\n" +
                    "</div>"
                );

                var partSubmodelElements = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SubmodelElements
                )
                {
                    partSubmodelElements.Add(this.Transform(item));
                }

                partSubmodelElements.Add("</div>");
                parts.Add(string.Join("\n", partSubmodelElements));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-submodel'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformRelationshipElement(
            Aas.IRelationshipElement that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render First
            parts.Add(
                "<div class='property'>" +
                "<!-- First -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "First\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.First
                )
            );
            parts.Add("</div>");

            // Render Second
            parts.Add(
                "<div class='property'>" +
                "<!-- Second -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Second\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.Second
                )
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-relationship-element'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformSubmodelElementList(
            Aas.ISubmodelElementList that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render OrderRelevant
            parts.Add(
                "<div class='property'>" +
                "<!-- Order relevant -->"
            );
            if (that.OrderRelevant != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Order relevant\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='bool'>\n" +
                    $"{((bool)that.OrderRelevant ? "true" : "false")}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render SemanticIdListElement
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID list element -->"
            );
            if (that.SemanticIdListElement != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID list element\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticIdListElement
                    )
                );
            }
            parts.Add("</div>");

            // Render TypeValueListElement
            parts.Add(
                "<div class='property'>" +
                "<!-- Type value list element -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Type value list element\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.TypeValueListElement
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render ValueTypeListElement
            parts.Add(
                "<div class='property'>" +
                "<!-- Value type list element -->"
            );
            if (that.ValueTypeListElement != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value type list element\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='enumeration'>\n" +
                    System.Web.HttpUtility.HtmlEncode(
                        Aas.Stringification.ToString(
                            that.ValueTypeListElement
                        ) ?? "Invalid value"
                    ) + "\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                var partValue = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Value
                )
                {
                    partValue.Add(this.Transform(item));
                }

                partValue.Add("</div>");
                parts.Add(string.Join("\n", partValue));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-submodel-element-list'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformSubmodelElementCollection(
            Aas.ISubmodelElementCollection that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                var partValue = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Value
                )
                {
                    partValue.Add(this.Transform(item));
                }

                partValue.Add("</div>");
                parts.Add(string.Join("\n", partValue));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-submodel-element-collection'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformProperty(
            Aas.IProperty that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render ValueType
            parts.Add(
                "<div class='property'>" +
                "<!-- Value type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.ValueType
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Value)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render ValueId
            parts.Add(
                "<div class='property'>" +
                "<!-- Value ID -->"
            );
            if (that.ValueId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.ValueId
                    )
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-property'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformMultiLanguageProperty(
            Aas.IMultiLanguageProperty that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                var partValue = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Value
                )
                {
                    partValue.Add(this.Transform(item));
                }

                partValue.Add("</div>");
                parts.Add(string.Join("\n", partValue));
            }
            parts.Add("</div>");

            // Render ValueId
            parts.Add(
                "<div class='property'>" +
                "<!-- Value ID -->"
            );
            if (that.ValueId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.ValueId
                    )
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-multi-language-property'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformRange(
            Aas.IRange that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render ValueType
            parts.Add(
                "<div class='property'>" +
                "<!-- Value type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.ValueType
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Min
            parts.Add(
                "<div class='property'>" +
                "<!-- Min -->"
            );
            if (that.Min != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Min\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Min)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render Max
            parts.Add(
                "<div class='property'>" +
                "<!-- Max -->"
            );
            if (that.Max != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Max\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Max)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-range'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformReferenceElement(
            Aas.IReferenceElement that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.Value
                    )
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-reference-element'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformBlob(
            Aas.IBlob that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='bytearray'>\n" +
                    $"{that.Value.Length} byte(s)\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render ContentType
            parts.Add(
                "<div class='property'>" +
                "<!-- Content type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Content type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.ContentType)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-blob'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformFile(
            Aas.IFile that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Value)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render ContentType
            parts.Add(
                "<div class='property'>" +
                "<!-- Content type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Content type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.ContentType)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-file'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformAnnotatedRelationshipElement(
            Aas.IAnnotatedRelationshipElement that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render First
            parts.Add(
                "<div class='property'>" +
                "<!-- First -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "First\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.First
                )
            );
            parts.Add("</div>");

            // Render Second
            parts.Add(
                "<div class='property'>" +
                "<!-- Second -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Second\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.Second
                )
            );
            parts.Add("</div>");

            // Render Annotations
            parts.Add(
                "<div class='property'>" +
                "<!-- Annotations -->"
            );
            if (that.Annotations != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Annotations\n" +
                    "</div>"
                );

                var partAnnotations = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Annotations
                )
                {
                    partAnnotations.Add(this.Transform(item));
                }

                partAnnotations.Add("</div>");
                parts.Add(string.Join("\n", partAnnotations));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-annotated-relationship-element'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformEntity(
            Aas.IEntity that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render Statements
            parts.Add(
                "<div class='property'>" +
                "<!-- Statements -->"
            );
            if (that.Statements != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Statements\n" +
                    "</div>"
                );

                var partStatements = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Statements
                )
                {
                    partStatements.Add(this.Transform(item));
                }

                partStatements.Add("</div>");
                parts.Add(string.Join("\n", partStatements));
            }
            parts.Add("</div>");

            // Render EntityType
            parts.Add(
                "<div class='property'>" +
                "<!-- Entity type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Entity type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.EntityType
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render GlobalAssetId
            parts.Add(
                "<div class='property'>" +
                "<!-- Global asset ID -->"
            );
            if (that.GlobalAssetId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Global asset ID\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.GlobalAssetId)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render SpecificAssetIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Specific asset IDs -->"
            );
            if (that.SpecificAssetIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Specific asset IDs\n" +
                    "</div>"
                );

                var partSpecificAssetIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SpecificAssetIds
                )
                {
                    partSpecificAssetIds.Add(this.Transform(item));
                }

                partSpecificAssetIds.Add("</div>");
                parts.Add(string.Join("\n", partSpecificAssetIds));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-entity'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformEventPayload(
            Aas.IEventPayload that
        )
        {
            var parts = new List<string>();

            // Render Source
            parts.Add(
                "<div class='property'>" +
                "<!-- Source -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Source\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.Source
                )
            );
            parts.Add("</div>");

            // Render SourceSemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Source semantic ID -->"
            );
            if (that.SourceSemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Source semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SourceSemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render ObservableReference
            parts.Add(
                "<div class='property'>" +
                "<!-- Observable reference -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Observable reference\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.ObservableReference
                )
            );
            parts.Add("</div>");

            // Render ObservableSemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Observable semantic ID -->"
            );
            if (that.ObservableSemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Observable semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.ObservableSemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render Topic
            parts.Add(
                "<div class='property'>" +
                "<!-- Topic -->"
            );
            if (that.Topic != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Topic\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Topic)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render SubjectId
            parts.Add(
                "<div class='property'>" +
                "<!-- Subject ID -->"
            );
            if (that.SubjectId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Subject ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SubjectId
                    )
                );
            }
            parts.Add("</div>");

            // Render TimeStamp
            parts.Add(
                "<div class='property'>" +
                "<!-- Time stamp -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Time stamp\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.TimeStamp)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Payload
            parts.Add(
                "<div class='property'>" +
                "<!-- Payload -->"
            );
            if (that.Payload != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Payload\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='bytearray'>\n" +
                    $"{that.Payload.Length} byte(s)\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-event-payload'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformBasicEventElement(
            Aas.IBasicEventElement that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render Observed
            parts.Add(
                "<div class='property'>" +
                "<!-- Observed -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Observed\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.Observed
                )
            );
            parts.Add("</div>");

            // Render Direction
            parts.Add(
                "<div class='property'>" +
                "<!-- Direction -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Direction\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.Direction
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render State
            parts.Add(
                "<div class='property'>" +
                "<!-- State -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "State\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.State
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render MessageTopic
            parts.Add(
                "<div class='property'>" +
                "<!-- Message topic -->"
            );
            if (that.MessageTopic != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Message topic\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.MessageTopic)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render MessageBroker
            parts.Add(
                "<div class='property'>" +
                "<!-- Message broker -->"
            );
            if (that.MessageBroker != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Message broker\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.MessageBroker
                    )
                );
            }
            parts.Add("</div>");

            // Render LastUpdate
            parts.Add(
                "<div class='property'>" +
                "<!-- Last update -->"
            );
            if (that.LastUpdate != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Last update\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.LastUpdate)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render MinInterval
            parts.Add(
                "<div class='property'>" +
                "<!-- Min interval -->"
            );
            if (that.MinInterval != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Min interval\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.MinInterval)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render MaxInterval
            parts.Add(
                "<div class='property'>" +
                "<!-- Max interval -->"
            );
            if (that.MaxInterval != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Max interval\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.MaxInterval)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-basic-event-element'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformOperation(
            Aas.IOperation that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render InputVariables
            parts.Add(
                "<div class='property'>" +
                "<!-- Input variables -->"
            );
            if (that.InputVariables != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Input variables\n" +
                    "</div>"
                );

                var partInputVariables = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.InputVariables
                )
                {
                    partInputVariables.Add(this.Transform(item));
                }

                partInputVariables.Add("</div>");
                parts.Add(string.Join("\n", partInputVariables));
            }
            parts.Add("</div>");

            // Render OutputVariables
            parts.Add(
                "<div class='property'>" +
                "<!-- Output variables -->"
            );
            if (that.OutputVariables != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Output variables\n" +
                    "</div>"
                );

                var partOutputVariables = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.OutputVariables
                )
                {
                    partOutputVariables.Add(this.Transform(item));
                }

                partOutputVariables.Add("</div>");
                parts.Add(string.Join("\n", partOutputVariables));
            }
            parts.Add("</div>");

            // Render InoutputVariables
            parts.Add(
                "<div class='property'>" +
                "<!-- Inoutput variables -->"
            );
            if (that.InoutputVariables != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Inoutput variables\n" +
                    "</div>"
                );

                var partInoutputVariables = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.InoutputVariables
                )
                {
                    partInoutputVariables.Add(this.Transform(item));
                }

                partInoutputVariables.Add("</div>");
                parts.Add(string.Join("\n", partInoutputVariables));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-operation'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformOperationVariable(
            Aas.IOperationVariable that
        )
        {
            var parts = new List<string>();

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.Value
                )
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-operation-variable'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformCapability(
            Aas.ICapability that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render SemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Semantic ID -->"
            );
            if (that.SemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.SemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render SupplementalSemanticIds
            parts.Add(
                "<div class='property'>" +
                "<!-- Supplemental semantic IDs -->"
            );
            if (that.SupplementalSemanticIds != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Supplemental semantic IDs\n" +
                    "</div>"
                );

                var partSupplementalSemanticIds = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.SupplementalSemanticIds
                )
                {
                    partSupplementalSemanticIds.Add(this.Transform(item));
                }

                partSupplementalSemanticIds.Add("</div>");
                parts.Add(string.Join("\n", partSupplementalSemanticIds));
            }
            parts.Add("</div>");

            // Render Qualifiers
            parts.Add(
                "<div class='property'>" +
                "<!-- Qualifiers -->"
            );
            if (that.Qualifiers != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Qualifiers\n" +
                    "</div>"
                );

                var partQualifiers = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Qualifiers
                )
                {
                    partQualifiers.Add(this.Transform(item));
                }

                partQualifiers.Add("</div>");
                parts.Add(string.Join("\n", partQualifiers));
            }
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-capability'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformConceptDescription(
            Aas.IConceptDescription that
        )
        {
            var parts = new List<string>();

            // Render Extensions
            parts.Add(
                "<div class='property'>" +
                "<!-- Extensions -->"
            );
            if (that.Extensions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Extensions\n" +
                    "</div>"
                );

                var partExtensions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Extensions
                )
                {
                    partExtensions.Add(this.Transform(item));
                }

                partExtensions.Add("</div>");
                parts.Add(string.Join("\n", partExtensions));
            }
            parts.Add("</div>");

            // Render Category
            parts.Add(
                "<div class='property'>" +
                "<!-- Category -->"
            );
            if (that.Category != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Category\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Category)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render IdShort
            parts.Add(
                "<div class='property'>" +
                "<!-- ID-short -->"
            );
            if (that.IdShort != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "ID-short\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.IdShort)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DisplayName
            parts.Add(
                "<div class='property'>" +
                "<!-- Display name -->"
            );
            if (that.DisplayName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Display name\n" +
                    "</div>"
                );

                var partDisplayName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.DisplayName
                )
                {
                    partDisplayName.Add(this.Transform(item));
                }

                partDisplayName.Add("</div>");
                parts.Add(string.Join("\n", partDisplayName));
            }
            parts.Add("</div>");

            // Render Description
            parts.Add(
                "<div class='property'>" +
                "<!-- Description -->"
            );
            if (that.Description != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Description\n" +
                    "</div>"
                );

                var partDescription = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Description
                )
                {
                    partDescription.Add(this.Transform(item));
                }

                partDescription.Add("</div>");
                parts.Add(string.Join("\n", partDescription));
            }
            parts.Add("</div>");

            // Render Administration
            parts.Add(
                "<div class='property'>" +
                "<!-- Administration -->"
            );
            if (that.Administration != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Administration\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.Administration
                    )
                );
            }
            parts.Add("</div>");

            // Render Id
            parts.Add(
                "<div class='property'>" +
                "<!-- ID -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "ID\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Id)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render EmbeddedDataSpecifications
            parts.Add(
                "<div class='property'>" +
                "<!-- Embedded data specifications -->"
            );
            if (that.EmbeddedDataSpecifications != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Embedded data specifications\n" +
                    "</div>"
                );

                var partEmbeddedDataSpecifications = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.EmbeddedDataSpecifications
                )
                {
                    partEmbeddedDataSpecifications.Add(this.Transform(item));
                }

                partEmbeddedDataSpecifications.Add("</div>");
                parts.Add(string.Join("\n", partEmbeddedDataSpecifications));
            }
            parts.Add("</div>");

            // Render IsCaseOf
            parts.Add(
                "<div class='property'>" +
                "<!-- Is case of -->"
            );
            if (that.IsCaseOf != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Is case of\n" +
                    "</div>"
                );

                var partIsCaseOf = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.IsCaseOf
                )
                {
                    partIsCaseOf.Add(this.Transform(item));
                }

                partIsCaseOf.Add("</div>");
                parts.Add(string.Join("\n", partIsCaseOf));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-concept-description'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformReference(
            Aas.IReference that
        )
        {
            var parts = new List<string>();

            // Render Type
            parts.Add(
                "<div class='property'>" +
                "<!-- Type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.Type
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render ReferredSemanticId
            parts.Add(
                "<div class='property'>" +
                "<!-- Referred semantic ID -->"
            );
            if (that.ReferredSemanticId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Referred semantic ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.ReferredSemanticId
                    )
                );
            }
            parts.Add("</div>");

            // Render Keys
            parts.Add(
                "<div class='property'>" +
                "<!-- Keys -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Keys\n" +
                "</div>"
            );

            var partKeys = new List<string>()
                {
                    "<div class='list'>\n"
                };

            foreach (
                var item in
                that.Keys
            )
            {
                partKeys.Add(this.Transform(item));
            }

            partKeys.Add("</div>");
            parts.Add(string.Join("\n", partKeys));
            parts.Add("</div>");

            return
                "<div class='embedded aas-reference'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformKey(
            Aas.IKey that
        )
        {
            var parts = new List<string>();

            // Render Type
            parts.Add(
                "<div class='property'>" +
                "<!-- Type -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Type\n" +
                "</div>"
            );

            parts.Add(
                "<div class='enumeration'>\n" +
                System.Web.HttpUtility.HtmlEncode(
                    Aas.Stringification.ToString(
                        that.Type
                    ) ?? "Invalid value"
                ) + "\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Value)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-key'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformLangStringNameType(
            Aas.ILangStringNameType that
        )
        {
            var parts = new List<string>();

            // Render Language
            parts.Add(
                "<div class='property'>" +
                "<!-- Language -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Language\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Language)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Text
            parts.Add(
                "<div class='property'>" +
                "<!-- Text -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Text\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Text)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-lang-string-name-type'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformLangStringTextType(
            Aas.ILangStringTextType that
        )
        {
            var parts = new List<string>();

            // Render Language
            parts.Add(
                "<div class='property'>" +
                "<!-- Language -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Language\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Language)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Text
            parts.Add(
                "<div class='property'>" +
                "<!-- Text -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Text\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Text)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-lang-string-text-type'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformEnvironment(
            Aas.IEnvironment that
        )
        {
            var parts = new List<string>();

            // Render AssetAdministrationShells
            parts.Add(
                "<div class='property'>" +
                "<!-- Asset administration shells -->"
            );
            if (that.AssetAdministrationShells != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Asset administration shells\n" +
                    "</div>"
                );

                var partAssetAdministrationShells = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.AssetAdministrationShells
                )
                {
                    partAssetAdministrationShells.Add(this.Transform(item));
                }

                partAssetAdministrationShells.Add("</div>");
                parts.Add(string.Join("\n", partAssetAdministrationShells));
            }
            parts.Add("</div>");

            // Render Submodels
            parts.Add(
                "<div class='property'>" +
                "<!-- Submodels -->"
            );
            if (that.Submodels != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Submodels\n" +
                    "</div>"
                );

                var partSubmodels = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Submodels
                )
                {
                    partSubmodels.Add(this.Transform(item));
                }

                partSubmodels.Add("</div>");
                parts.Add(string.Join("\n", partSubmodels));
            }
            parts.Add("</div>");

            // Render ConceptDescriptions
            parts.Add(
                "<div class='property'>" +
                "<!-- Concept descriptions -->"
            );
            if (that.ConceptDescriptions != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Concept descriptions\n" +
                    "</div>"
                );

                var partConceptDescriptions = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.ConceptDescriptions
                )
                {
                    partConceptDescriptions.Add(this.Transform(item));
                }

                partConceptDescriptions.Add("</div>");
                parts.Add(string.Join("\n", partConceptDescriptions));
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-environment'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformEmbeddedDataSpecification(
            Aas.IEmbeddedDataSpecification that
        )
        {
            var parts = new List<string>();

            // Render DataSpecification
            parts.Add(
                "<div class='property'>" +
                "<!-- Data specification -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Data specification\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.DataSpecification
                )
            );
            parts.Add("</div>");

            // Render DataSpecificationContent
            parts.Add(
                "<div class='property'>" +
                "<!-- Data specification content -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Data specification content\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.DataSpecificationContent
                )
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-embedded-data-specification'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformLevelType(
            Aas.ILevelType that
        )
        {
            var parts = new List<string>();

            // Render Min
            parts.Add(
                "<div class='property'>" +
                "<!-- Min -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Min\n" +
                "</div>"
            );

            parts.Add(
                "<div class='bool'>\n" +
                $"{(that.Min ? "true" : "false")}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Nom
            parts.Add(
                "<div class='property'>" +
                "<!-- Nom -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Nom\n" +
                "</div>"
            );

            parts.Add(
                "<div class='bool'>\n" +
                $"{(that.Nom ? "true" : "false")}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Typ
            parts.Add(
                "<div class='property'>" +
                "<!-- Typ -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Typ\n" +
                "</div>"
            );

            parts.Add(
                "<div class='bool'>\n" +
                $"{(that.Typ ? "true" : "false")}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Max
            parts.Add(
                "<div class='property'>" +
                "<!-- Max -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Max\n" +
                "</div>"
            );

            parts.Add(
                "<div class='bool'>\n" +
                $"{(that.Max ? "true" : "false")}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-level-type'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformValueReferencePair(
            Aas.IValueReferencePair that
        )
        {
            var parts = new List<string>();

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Value)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render ValueId
            parts.Add(
                "<div class='property'>" +
                "<!-- Value ID -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value ID\n" +
                "</div>"
            );

            parts.Add(
                this.Transform(
                    that.ValueId
                )
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-value-reference-pair'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformValueList(
            Aas.IValueList that
        )
        {
            var parts = new List<string>();

            // Render ValueReferencePairs
            parts.Add(
                "<div class='property'>" +
                "<!-- Value reference pairs -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Value reference pairs\n" +
                "</div>"
            );

            var partValueReferencePairs = new List<string>()
                {
                    "<div class='list'>\n"
                };

            foreach (
                var item in
                that.ValueReferencePairs
            )
            {
                partValueReferencePairs.Add(this.Transform(item));
            }

            partValueReferencePairs.Add("</div>");
            parts.Add(string.Join("\n", partValueReferencePairs));
            parts.Add("</div>");

            return
                "<div class='embedded aas-value-list'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformLangStringPreferredNameTypeIec61360(
            Aas.ILangStringPreferredNameTypeIec61360 that
        )
        {
            var parts = new List<string>();

            // Render Language
            parts.Add(
                "<div class='property'>" +
                "<!-- Language -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Language\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Language)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Text
            parts.Add(
                "<div class='property'>" +
                "<!-- Text -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Text\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Text)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-lang-string-preferred-name-type-iec-61360'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformLangStringShortNameTypeIec61360(
            Aas.ILangStringShortNameTypeIec61360 that
        )
        {
            var parts = new List<string>();

            // Render Language
            parts.Add(
                "<div class='property'>" +
                "<!-- Language -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Language\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Language)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Text
            parts.Add(
                "<div class='property'>" +
                "<!-- Text -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Text\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Text)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-lang-string-short-name-type-iec-61360'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformLangStringDefinitionTypeIec61360(
            Aas.ILangStringDefinitionTypeIec61360 that
        )
        {
            var parts = new List<string>();

            // Render Language
            parts.Add(
                "<div class='property'>" +
                "<!-- Language -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Language\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Language)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            // Render Text
            parts.Add(
                "<div class='property'>" +
                "<!-- Text -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Text\n" +
                "</div>"
            );

            parts.Add(
                "<div class='str'>\n" +
                $"{System.Web.HttpUtility.HtmlEncode(that.Text)}\n" +
                "</div>"
            );
            parts.Add("</div>");

            return
                "<div class='embedded aas-lang-string-definition-type-iec-61360'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }

        public override string TransformDataSpecificationIec61360(
            Aas.IDataSpecificationIec61360 that
        )
        {
            var parts = new List<string>();

            // Render PreferredName
            parts.Add(
                "<div class='property'>" +
                "<!-- Preferred name -->"
            );
            parts.Add(
                "<div class='label'>\n" +
                "Preferred name\n" +
                "</div>"
            );

            var partPreferredName = new List<string>()
                {
                    "<div class='list'>\n"
                };

            foreach (
                var item in
                that.PreferredName
            )
            {
                partPreferredName.Add(this.Transform(item));
            }

            partPreferredName.Add("</div>");
            parts.Add(string.Join("\n", partPreferredName));
            parts.Add("</div>");

            // Render ShortName
            parts.Add(
                "<div class='property'>" +
                "<!-- Short name -->"
            );
            if (that.ShortName != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Short name\n" +
                    "</div>"
                );

                var partShortName = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.ShortName
                )
                {
                    partShortName.Add(this.Transform(item));
                }

                partShortName.Add("</div>");
                parts.Add(string.Join("\n", partShortName));
            }
            parts.Add("</div>");

            // Render Unit
            parts.Add(
                "<div class='property'>" +
                "<!-- Unit -->"
            );
            if (that.Unit != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Unit\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Unit)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render UnitId
            parts.Add(
                "<div class='property'>" +
                "<!-- Unit ID -->"
            );
            if (that.UnitId != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Unit ID\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.UnitId
                    )
                );
            }
            parts.Add("</div>");

            // Render SourceOfDefinition
            parts.Add(
                "<div class='property'>" +
                "<!-- Source of definition -->"
            );
            if (that.SourceOfDefinition != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Source of definition\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.SourceOfDefinition)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render Symbol
            parts.Add(
                "<div class='property'>" +
                "<!-- Symbol -->"
            );
            if (that.Symbol != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Symbol\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Symbol)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render DataType
            parts.Add(
                "<div class='property'>" +
                "<!-- Data type -->"
            );
            if (that.DataType != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Data type\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='enumeration'>\n" +
                    System.Web.HttpUtility.HtmlEncode(
                        Aas.Stringification.ToString(
                            that.DataType
                        ) ?? "Invalid value"
                    ) + "\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render Definition
            parts.Add(
                "<div class='property'>" +
                "<!-- Definition -->"
            );
            if (that.Definition != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Definition\n" +
                    "</div>"
                );

                var partDefinition = new List<string>()
                    {
                        "<div class='list'>\n"
                    };

                foreach (
                    var item in
                    that.Definition
                )
                {
                    partDefinition.Add(this.Transform(item));
                }

                partDefinition.Add("</div>");
                parts.Add(string.Join("\n", partDefinition));
            }
            parts.Add("</div>");

            // Render ValueFormat
            parts.Add(
                "<div class='property'>" +
                "<!-- Value format -->"
            );
            if (that.ValueFormat != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value format\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.ValueFormat)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render ValueList
            parts.Add(
                "<div class='property'>" +
                "<!-- Value list -->"
            );
            if (that.ValueList != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value list\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.ValueList
                    )
                );
            }
            parts.Add("</div>");

            // Render Value
            parts.Add(
                "<div class='property'>" +
                "<!-- Value -->"
            );
            if (that.Value != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Value\n" +
                    "</div>"
                );

                parts.Add(
                    "<div class='str'>\n" +
                    $"{System.Web.HttpUtility.HtmlEncode(that.Value)}\n" +
                    "</div>"
                );
            }
            parts.Add("</div>");

            // Render LevelType
            parts.Add(
                "<div class='property'>" +
                "<!-- Level type -->"
            );
            if (that.LevelType != null)
            {
                parts.Add(
                    "<div class='label'>\n" +
                    "Level type\n" +
                    "</div>"
                );

                parts.Add(
                    this.Transform(
                        that.LevelType
                    )
                );
            }
            parts.Add("</div>");

            return
                "<div class='embedded aas-data-specification-iec-61360'>\n" +
                $"{string.Join("\n", parts)}\n" +
                "</div>";
        }
    }  // internal class ElementRenderer
}  // namespace RenderEnvironmentToHtml

/*
 * This code has been automatically generated by aas_core3_0_sk_codegen.
 * Do NOT edit or append.
 */

